---
# tasks file for compile_python_source
- name: Install required files to compile Python {{ version }}
  yum:
    name: "{{ dependencies_packages }}"

- name: Download Python {{ version }} from source
  get_url:
    url: "{{ python_version_url }}"
    dest: "{{ download_dest }}"

- name: Extract python {{ version }} archive
  ansible.builtin.unarchive:
    src: "{{ download_dest }}/{{ archive_filename }}"
    dest: "{{ download_dest }}/"
    remote_src: yes

- name: Run configure for Python
  command: chdir="{{ download_dest }}/{{ unarchive_filename }}" ./configure --enable-optimizations

- name: Make Python binary
  command: chdir="{{ download_dest }}/{{ unarchive_filename }}" make altinstall

- name: Create a symbolic link for Python{{ major_version }}
  ansible.builtin.file:
    src: "/usr/local/bin/python{{ minor_version }}"
    dest: "{{ item }}/python{{ major_version }}"
    state: link
  loop:
    - "/usr/bin"
    - "/usr/local/bin"

#Install Pip
- name: Download PIP install script
  vars:
    ansible_python_interpreter: "/usr/bin/python{{ major_version }}"
  get_url:
    url: "{{ pip_url }}"
    dest: "{{ download_dest }}/"

- name: Run PIP install script
  command: python"{{ major_version }}" "{{ download_dest }}/{{ pip_filename }}"

- name: Create a symbolic link for pip{{ major_version }}
  ansible.builtin.file:
    src: "/usr/local/bin/pip{{ minor_version }}"
    dest: "{{ item }}/pip{{ major_version }}"
    state: link
  loop:
    - "/usr/bin"

- name: Clean up after installs
  file:
    state: absent
    path: "{{ download_dest }}/{{ item }}"
  loop: 
    - "{{ unarchive_filename }}"
    - "{{ archive_filename }}"
    - "{{ pip_filename }}"

- name: Setup Path for Pip installed executables
  blockinfile:
    path: "/etc/profile.d/pip.sh"
    create: yes
    state: present
    owner: root
    group: root
    mode: 0644
    block: "{{ pip_paths }}"
