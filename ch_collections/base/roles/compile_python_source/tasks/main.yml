---
# tasks file for compile_python_source
- name: Install required files to compile Python {{ version }}
  yum:
    name: "{{ dependencies_packages }}"
- name: Download Python {{ version }} from source
  get_url:
    url: "{{ python_version_url }}"
    dest: "{{ download_dest }}"
- name: Extract python {{ version }} archive
  ansible.builtin.unarchive:
    src: "{{ download_dest }}/{{ archive_filename }}"
    dest: "{{ download_dest }}/"
    remote_src: yes
- name: Run configure for Python
  command: chdir="{{ download_dest }}/{{ unarchive_filename }}" ./configure --enable-optimizations
- name: Make Python binary
  command: chdir="{{ download_dest }}/{{ unarchive_filename }}" make altinstall
- name: Create a symbolic link for Python{{ major_version }}
  ansible.builtin.file:
    src: "/usr/local/bin/python{{ major_version }}"
    dest: "/usr/bin/python{{ major_version }}"
    state: link

- name: Download PIP install script
  get_url:
    url: "{{ pip_url }}"
    dest: "{{ download_dest }}/"
- name: Run PIP install script
  command: python"{{ major_version }}" "{{ download_dest }}/{{ pip_filename }}"
- name: Create a symbolic link for pip{{ major_version }}
  ansible.builtin.file:
    src: "/usr/local/bin/pip{{ major_version }}"
    dest: "/usr/bin/pip{{ major_version.split('.')[0] }}"
    state: link

- name: Clean up after installs
  file:
    state: absent
    path: "{{ download_dest }}/{{ item }}"
  loop: 
    - "{{ version }}"
    - "{{ version }}.tar.gz"
    - "{{ pip_filename }}"