---
- name: Include distribution and version-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
      skip: true

- include_tasks: setup-vars.yml

- name: Ensure ClamAV packages are installed.
  ansible.builtin.package: name={{ item }} state=present
  with_items: "{{ clamav_packages }}"
  register: clamav_packages_install

- name: Change configuration for the ClamAV Freshclam.
  ansible.builtin.lineinfile:
    path: "{{ clamav_freshclam_config_path }}"
    regexp: "{{ item.regexp | default(omit) }}"
    line: "{{ item.line | default('') }}"
    insertbefore: "{{ item.before | default(omit) }}"
    firstmatch: "{{ item.firstmatch | default('true') }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ clamav_freshclam_configuration_changes }}"

- name: Update ClamAV Freshclam configuration to use the Daemon user
  ansible.builtin.lineinfile:
    path: "{{ clamav_freshclam_config_path }}"
    regexp: "^.*DatabaseOwner .*$"
    line: "DatabaseOwner {{ clamav_user }}"
    state: present
  when: clamav_freshclam_uses_daemon_user

# Create socket file for ClamAV
- name: Create the socket file with correct ownership
  ansible.builtin.file:
    path: "{{ clamav_daemon_localsocket | dirname }}"
    state: directory
    owner: "{{ clamav_user }}"
    group: "{{ clamav_user }}"
    mode: 0750

- name: test to see if selinux is running
  ansible.builtin.command: getenforce
  register: sestatus
  changed_when: false

- name: Set fact based on selinux status output from previous check
  ansible.builtin.set_fact:
    selinux_status: "{{ sestatus.stdout  }}"

- name: SELinux Contexts for configs
  community.general.sefcontext:
    target: "{{ clamav_daemon_localsocket | dirname  }}"
    setype: antivirus_var_run_t
    state: present
  when: selinux_status == "Enforcing"
  notify: restorecon

- name: Create persistent SELinux boolean policies
  ansible.posix.seboolean:
    name: "antivirus_can_scan_system"
    state: true
    persistent: true
  when: selinux_status == "Enforcing"

- name: Flush handlers to ensure selinux contexts are correct before continuing
  meta: flush_handlers

- name: Run freshclam after ClamAV packages change
  ansible.builtin.command: freshclam
  when: clamav_packages_install.changed
  register: freshclam_result
  notify: restart clamav daemon
  # On Debian, freshclam is automatically run post-install, so this may fail.
  failed_when:
    - freshclam_result is failed
    - freshclam_result.stderr.find('locked by another process') != -1
  tags: ['skip_ansible_lint']

- name: Change ownership of ClamAV database to the Daemon user
  block:
    - name: Get list of database files
      ansible.builtin.find:
        path: /var/lib/clamav
        file_type: any
        recurse: true
      register: freshclam_database
    - name: Update database file ownership
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ clamav_user }}"
        group: "{{ clamav_user }}"
        mode: 0644
      loop: "{{ freshclam_database.files }}"
    - name: Update database ownership
      ansible.builtin.file:
        path: /var/lib/clamav
        owner: "{{ clamav_user }}"
        group: "{{ clamav_user }}"
        mode: 0755
  when: clamav_freshclam_uses_daemon_user

- include_tasks: setup-RedHat-6.yml
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '6'

- include_tasks: setup-RedHat.yml
  when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version > '6') or
        (ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2')

- name: Change configuration for the ClamAV daemon
  ansible.builtin.lineinfile:
    path: "{{ clamav_daemon_config_path }}"
    regexp: '{{ item.regexp }}'
    line: "{{ item.line | default('') }}"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ clamav_daemon_configuration_changes }}"

- name: Setup scanning script and daily scanning
  block:
    - name: Add clamav user to sudoers file
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/clamav
        line: '{{ clamav_user }} ALL=(root) NOPASSWD: /usr/bin/clamdscan *'
        validate: 'visudo -cf %s'
        create: true
        owner: root
        group: root
        mode: 0640
    - name: Add paths to exclude from scanning to clamd config
      ansible.builtin.lineinfile:
        path: "{{ clamav_daemon_config_path }}"
        insertafter: '^.*ExcludePath .*$'
        line: "ExcludePath {{ item }}"
        state: "present"
        mode: 0644
      with_items: "{{ clamav_daemon_configuration_changes_exclude_paths }}"
    - name: Add scanning script from template
      ansible.builtin.copy:
        src: clamav-scan.sh
        dest: /usr/local/bin/clamav-scan.sh
        owner: "{{ clamav_user }}"
        group: "{{ clamav_user }}"
        mode: 0655
    - name: Add scanning entry to cron
      ansible.builtin.cron:
        name: clamav scan
        minute: '{{ clamav_scanning_minute | default("0") }}'
        hour: '{{ clamav_scanning_hour | default("03") }}'
        weekday: "{{ clamav_scanning_weekday | default(omit) }}"
        day: "{{ clamav_scanning_day | default(omit) }}"
        month: "{{ clamav_scanning_month | default(omit) }}"
        user: "{{ clamav_user }}"
        job: "/usr/local/bin/clamav-scan.sh"
        cron_file: clamav-scan

- name: Ensure ClamAV daemon is running (if configured)
  ansible.builtin.service:
    name: "{{ clamav_daemon }}"
    state: "{{ clamav_daemon_state }}"
    enabled: "{{ clamav_daemon_enabled }}"
  async: 30
  poll: 0
  when: ansible_virtualization_type != "docker"

- name: Ensure ClamAV freshclam daemon is running (if configured)
  ansible.builtin.service:
    name: "{{ clamav_freshclam_daemon }}"
    state: "{{ clamav_freshclam_daemon_state }}"
    enabled: "{{ clamav_freshclam_daemon_enabled }}"
  async: 30
  poll: 0
  when:
    - ansible_virtualization_type != "docker"
    - clamav_freshclam_daemon is defined
